QUE 1:-
Explore and explain the various methods in console function
Explain them
Ex. console.log()
console.warn()
etc

SOL:-

A Web console is a tool which is mainly used to log information associated with a web page like:network 
requests, javascript, security errors, warnings, CSS etc. 
It enables us to interact with a web page by executing javascript expression in the contents of the page.

Console object
In javascript, the console is an object which provides access to the browser debugging console. 
We can open a console in web browser by using: Ctrl + Shift + K for windows and Command + Option 
+ K for Mac. The console object provides us with several different methods, like :
log()
error()
warn()
clear()
time() and timeEnd()
table()
count()
group() and groupEnd()
custom console logs

1:
console.log()
Mainly used to log(print) the output to the console. We can put any type inside the log(), be it a string, array, object, boolean etc.

Syntax and example:-
console.log() method 
console.log('abc');  
console.log(1); 
console.log(true); 
console.log(null); 
console.log(undefined);  
console.log([1, 2, 3, 4]); // array inside log 
console.log({a:1, b:2, c:3}); // object inside log

2:
console.error()
Used to log error message to the console. Useful in testing of code. By default the error message will be highlighted with red color.

Syntax and example:-
console.error() method  
console.error('This is a simple error');  

3:
console.warn()
Used to log warning message to the console. By default the warning message will be highlighted with yellow color.

Syntax and example:-
console.warn() method  
console.warn('This is a warning.');  

4:
console.clear()
Used to clear the console. The console will be cleared, in case of Chrome a simple overlayed text will be printed like : ‘Console was 
cleared’ while in firefox no message is returned.

Syntax and example:-
console.clear() method  
console.clear();  

5:
console.time() and console.timeEnd()
Whenever we want to know the amount of time spend by a block or a function, we can make use of the time() and timeEnd() methods provided
by the javascript console object. They take a label which must be same, and the code inside can be anything( function, object, simple
 
 console).

Syntax and example:-
console.time() and console.timeEnd() method  
console.time('abc'); 
 let fun =  function(){ 
     console.log('fun is running'); 
 } 
 let fun2 = function(){ 
     console.log('fun2 is running..'); 
 } 
 fun(); // calling fun(); 
 fun2(); // calling fun2(); 
console.timeEnd('abc'); 

6:
console.table()
This method allows us to generate a table inside a console. The input must be an array or an object which will be shown as a table.

Syntax and example:-
console.table() method 
console.table({'a':1, 'b':2}); 

7:
console.count()
This method is used to count the number that the function hit by this counting method.

Syntax and example:-
console.count() method 
for(let i=0;i<5;i++){ 
    console.count(i); 
} 

8:
console.group() and console.groupEnd()
group() and groupEnd() methods of the console object allows us to group contents in a separate block, which will be indented. Just like
the time() and the timeEnd() they also accepts label, again of same value.

Syntax and example:-
console.group() and console.groupEnd() method 
console.group('simple'); 
console.warn('warning!'); 
console.error('error here'); 
console.log('vivi vini vici'); 
console.groupEnd('simple'); 
console.log('new section'); 

9:
Custom Console Logs
User can add Styling to the console logs in order to make logs Custom . The Syntax for it is to add the css styling as a parameter to
the logs which will replace %c in the logs as shown in the example below .

Syntax and example:-
Custom Console log example 
  const spacing = '10px'; 
  const styles =  
        `padding: ${spacing}; background-color: white; color: green; font-style:  
         italic; border: 1px solid black; font-size: 2em;`; 
  console.log('%cGeeks for Geeks', styles); 



QUE 2:-
Write the difference between var, let and const with code examples.

SOL:-

1:
Var
The JavaScript variables statement is used to declare a variable and, optionally, we can initialize the value of that variable.

Example: var a =10;

* Variable declarations are processed before the execution of the code.
* The scope of a JavaScript variable declared with var is its current execution context.
* The scope of a JavaScript variable declared outside the function is global.

CODE:-
function nodeSimplified()
{
  var a =10;
  console.log(a);  // output 10
  if(true)
  {
   var a=20;
   console.log(a); // output 20
  }
  console.log(a);  // output 20
}

In the above code, you can find, when the variable is updated inside the if loop, that the value of variable "a" updated 20 globally,
hence outside the if loop the value persists. It is similar to the Global variable present in other languages. But, be sure to use this
functionality with great care because there is the possibility of overriding an existing value.

2:
Let
The let statement declares a local variable in a block scope. It is similar to var, in that we can optionally initialize the variable.

Example: let a =10;

* The let statement allows you to create a variable with the scope limited to the block on which it is used.
* It is similar to the variable we declare in other languages like Java, .NET, etc.

CODE:-
function nodeSimplified()
{
  let a =10;
  console.log(a);  // output 10
  if(true)
  {
   let a=20;
   console.log(a); // output 20
  }
  console.log(a);  // output 10
}

The scope will be well maintained with a let statement and when using an inner function the let statement makes your code clean and
clear.

3:
Const
const statement values can be assigned once and they cannot be reassigned. The scope of const statement works similar to let statements.

Example: const a =10;

CODE:-
function nodeSimplified()
{
  const MY_VARIABLE =10;
  console.log(MY_VARIABLE);  //output 10 
}

QUE 3:-
Write a brief intro on available data types in Javascript.

SOL:-

Javascript Data Types:-

JavaScript provides different data types to hold different types of values. 
There are two types of data types in JavaScript.
1.Primitive data type
2.Non-primitive (reference) data type

JavaScript is a dynamic type language, means you don't need to specify type of 
the variable because it is dynamically used by JavaScript engine. 
You need to use var here to specify the data type. It can hold any type of values 
such as numbers, strings etc. 
For example:
var a=40;//holding number  
var b="Rahul";//holding string  

JavaScript primitive data types:
There are five types of primitive data types in JavaScript. They are as follows:

1.String	  represents sequence of characters e.g. "hello".
2.Number	  represents numeric values e.g. 100.
3.Boolean	  represents boolean value either false or true.
4.Undefined   represents undefined value.
5.Null	      represents null i.e. no value at all.

JavaScript non-primitive data types:
The non-primitive data types are as follows:

1.Object	represents instance through which we can access members.
2.Array	    represents group of similar values.
3.RegExp	represents regular expression.